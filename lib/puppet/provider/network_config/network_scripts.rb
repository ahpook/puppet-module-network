Puppet::Type.type(:network_config).provide(:network_scripts) do
  desc "Provider for configuration of network_scripts"

  defaultfor :operatingsystem => [:redhat, :fedora, :centos]

  has_features :manages_userctl

  # Uses the ip command to determine if the device exists
  def exists?
    @config_file = "/etc/sysconfig/network-scripts/ifcfg-#{@resource[:name]}"

    # load puppet configuration (`should`)
    @memory_values = {}
    @resource.to_hash.each_pair do |k, v|
      next if [:loglevel, :provider, :ensure].include?(k)
      @memory_values[k.to_s.upcase.to_sym] = v.to_s unless v.nil?
    end

    # load on-disk configuration (`is`)
    @disk_values = load_disk_config()

    return @disk_values == @memory_values
  end

  def create
    File.open(@config_file.to_s, 'w') do |f|
      f.write("# Generated by puppet-network on #{Time.now.strftime("%F %T")}\n")
      @memory_values.each_pair { |k, v| f.write(v.nil? ? "#{k}\n" : "#{k}=\"#{v}\"\n") }
    end
  end

  def destroy
    if File.exists?(@config_file)
      Puppet.notice "Destroying #{@config_file}"
      File.unlink(@config_file)
    end
  end

  # Reads the content in the config file and returns a hash of keys & values
  def load_disk_config
    return nil unless File.exist?(@config_file)

    config_hash = {}
    lines = File.readlines(@config_file)

    lines.each do |line|
      next unless line =~ /^\s*([A-Za-z][^=]+)="?([^"]+)"?$/
      config_hash[$1.strip.upcase.to_sym] = $2.strip
    end

    Puppet.notice "Loaded file: #{@config_file}"
    return config_hash
  end
end
